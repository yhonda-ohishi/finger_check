#include <Adafruit_SSD1306.h>
#include <splash.h>

#include <Adafruit_MLX90614.h>
#include <Adafruit_VL53L0X.h>
#include <Adafruit_GFX.h>
#include <Wire.h>

#include <misakiUTF16.h>

#include <Adafruit_Fingerprint.h>
Adafruit_VL53L0X lox = Adafruit_VL53L0X();
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

#define SCREEN_WIDTH 128  // OLED 幅指定（メイン、サブ共通）
#define SCREEN_HEIGHT 64  // OLED 高さ指定（メイン）
#define OLED_RESET -1     // リセット端子（未使用-1）
#define SCREEN_HEIGHT 64  // OLED 高さ指定（メイン）

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire1, OLED_RESET);  //メイン
Adafruit_SSD1306 display1(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire1, OLED_RESET);
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial1);

uint8_t font[8];  // フォント格納バッファ
// '無題', 128x64px


const unsigned char km_err[] PROGMEM = {
  // const unsigned char NaN [] PROGMEM = {
  // '無題, 128x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x10, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7d, 0xfc, 0xfe, 0x10, 0x20, 0x00, 0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x45, 0x00, 0x28, 0xf8, 0x20, 0x01, 0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x45, 0x00, 0x92, 0x90, 0x20, 0xf0, 0xc0, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x45, 0x00, 0x93, 0x90, 0x3f, 0x30, 0x30, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7d, 0xf8, 0xca, 0xf9, 0xe0, 0x20, 0x18, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x11, 0x08, 0xfe, 0x90, 0x20, 0x40, 0x00, 0x21, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x51, 0x08, 0x10, 0x90, 0x20, 0x80, 0x00, 0x61, 0x81, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x5d, 0x08, 0xfe, 0xf8, 0x21, 0x00, 0x00, 0x41, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x51, 0xf8, 0xa2, 0x90, 0x20, 0x00, 0x01, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x51, 0x00, 0xa2, 0x90, 0x20, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x51, 0x00, 0xfa, 0x90, 0x20, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x5d, 0x00, 0x82, 0xf8, 0x30, 0x00, 0x38, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x61, 0xfc, 0x86, 0x80, 0x1f, 0xf1, 0xc0, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x11, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0xfe, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char tmp_err[] PROGMEM = {
  // '無題, 128x64px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x23, 0xfc, 0x3f, 0xfc, 0x10, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1a, 0x04, 0x20, 0x00, 0x10, 0x00, 0xc0, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0b, 0xfc, 0x26, 0x20, 0x10, 0x78, 0x60, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x42, 0x04, 0x3f, 0xfc, 0x1f, 0x90, 0x18, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x32, 0x04, 0x26, 0x20, 0xf0, 0x30, 0x0c, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x13, 0xfc, 0x27, 0xe0, 0x10, 0x20, 0x00, 0x10, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x40, 0x00, 0x30, 0x80, 0x87, 0xff, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x0b, 0xfe, 0x6f, 0xf8, 0x10, 0x80, 0x00, 0x60, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1a, 0x92, 0x44, 0x10, 0x10, 0x00, 0x00, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x92, 0x42, 0x20, 0x10, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x12, 0x92, 0x41, 0xc0, 0x10, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x22, 0x92, 0x47, 0x70, 0x18, 0x00, 0x1c, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x27, 0xff, 0x9c, 0x1c, 0x0f, 0xf8, 0xe0, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x08, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0xff, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// uint16_t getFingerprintEnroll(uint16_t id) {

//   int p = -1;
//   Serial.print("Waiting for valid finger to enroll as #");
//   Serial.println(id);
//   Serial.print("SOUND:putfinger");
//   while (p != FINGERPRINT_OK) {
//     p = finger.getImage();
//     switch (p) {
//       case FINGERPRINT_OK:
//         Serial.println("Image taken");
//         break;
//       case FINGERPRINT_NOFINGER:
//         Serial.println(".");
//         break;
//       case FINGERPRINT_PACKETRECIEVEERR:
//         Serial.println("Communication error");
//         break;
//       case FINGERPRINT_IMAGEFAIL:
//         Serial.println("Imaging error");
//         break;
//       default:
//         Serial.println("Unknown error");
//         break;
//     }
//   }

//   // OK success!

//   p = finger.image2Tz(1);
//   switch (p) {
//     case FINGERPRINT_OK:
//       Serial.println("Image converted");
//       break;
//     case FINGERPRINT_IMAGEMESS:
//       Serial.println("Image too messy");
//       return p;
//     case FINGERPRINT_PACKETRECIEVEERR:
//       Serial.println("Communication error");
//       return p;
//     case FINGERPRINT_FEATUREFAIL:
//       Serial.println("Could not find fingerprint features");
//       Serial.println("SOUND:finger_invalid");
//       return p;
//     case FINGERPRINT_INVALIDIMAGE:
//       Serial.println("Could not find fingerprint features");
//       Serial.println("SOUND:finger_invalid");
//       return p;
//     default:
//       Serial.println("Unknown error");
//       return p;
//   }

//   Serial.println("Remove finger");
//   Serial.println("SOUND:1");
//   delay(2000);
//   p = 0;
//   while (p != FINGERPRINT_NOFINGER) {
//     p = finger.getImage();
//   }
//   Serial.print("ID ");
//   Serial.println(id);
//   p = -1;
//   Serial.println("Place same finger again");
//   Serial.println("SOUND:SameFinger");
//   while (p != FINGERPRINT_OK) {
//     p = finger.getImage();
//     switch (p) {
//       case FINGERPRINT_OK:
//         Serial.println("Image taken");
//         Serial.println("SOUND:OK");
//         break;
//       case FINGERPRINT_NOFINGER:
//         Serial.print(".");
//         break;
//       case FINGERPRINT_PACKETRECIEVEERR:
//         Serial.println("Communication error");
//         break;
//       case FINGERPRINT_IMAGEFAIL:
//         Serial.println("Imaging error");
//         break;
//       default:
//         Serial.println("Unknown error");
//         break;
//     }
//   }

//   // OK success!

//   p = finger.image2Tz(2);
//   switch (p) {
//     case FINGERPRINT_OK:
//       Serial.println("Image converted");
//       break;
//     case FINGERPRINT_IMAGEMESS:
//       Serial.println("Image too messy");
//       return p;
//     case FINGERPRINT_PACKETRECIEVEERR:
//       Serial.println("Communication error");
//       return p;
//     case FINGERPRINT_FEATUREFAIL:
//       Serial.println("SOUND:finger_invalid");
//       Serial.println("Could not find fingerprint features");
//       return p;
//     case FINGERPRINT_INVALIDIMAGE:
//       Serial.println("SOUND:finger_invalid");
//       Serial.println("Could not find fingerprint features");
//       return p;
//     default:
//       Serial.println("Unknown error");
//       return p;
//   }

//   // OK converted!
//   Serial.print("Creating model for #");
//   Serial.println(id);

//   p = finger.createModel();
//   if (p == FINGERPRINT_OK) {
//     Serial.println("Prints matched!");
//     Serial.println("SOUND:2");
//   } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//     Serial.println("Communication error");
//     return p;
//   } else if (p == FINGERPRINT_ENROLLMISMATCH) {
//     Serial.println("SOUND:finger_notMatch");
//     Serial.println("Fingerprints did not match");
//     return p;
//   } else {
//     Serial.println("Unknown error");
//     return p;
//   }

//   Serial.print("ID ");
//   Serial.println(id);
//   p = finger.storeModel(id);
//   if (p == FINGERPRINT_OK) {
//     Serial.println("Stored!");
//   } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//     Serial.println("Communication error");
//     return p;
//   } else if (p == FINGERPRINT_BADLOCATION) {
//     Serial.println("Could not store in that location");
//     return p;
//   } else if (p == FINGERPRINT_FLASHERR) {
//     Serial.println("Error writing to flash");
//     return p;
//   } else {
//     Serial.println("Unknown error");
//     return p;
//   }

//   return true;
// }





// uint8_t readnumber(void) {
//   uint8_t num = 0;

//   while (num == 0) {
//     while (!Serial.available())
//       ;
//     num = Serial.parseInt();
//   }
//   return num;
// }
byte disp_st, disp1_st;

void setup() {
  Wire1.setSCL(3);
  Wire1.setSDA(2);     //I2C0はWireオブジェクトを使用します。
  Wire1.begin();       // Wire communication begin
  Serial.begin(115200);  // The baudrate of Serial monitor is set in 9600
  Serial2.setTX(4);
  Serial2.setRX(5);
  while (!Serial) {
    delay(1);
  };  // Waiting for Serial Monitor

  // set the data rate for the sensor serial port
  finger.begin(57600);
  // Serial1.begin(9600);
  Serial2.begin(9600);

  //finger print check
  if (!finger.verifyPassword()) {
    Serial.println("Did not find fingerprint sensor :(");
  } else {
    Serial.println("Found fingerprint sensor!");
    Serial.println(F("Reading sensor parameters"));
    finger.getParameters();
    Serial.print(F("Status: 0x"));
    Serial.println(finger.status_reg, HEX);
    Serial.print(F("Sys ID: 0x"));
    Serial.println(finger.system_id, HEX);
    Serial.print(F("Capacity: "));
    Serial.println(finger.capacity);
    Serial.print(F("Security level: "));
    Serial.println(finger.security_level);
    Serial.print(F("Device address: "));
    Serial.println(finger.device_addr, HEX);
    Serial.print(F("Packet len: "));
    Serial.println(finger.packet_len);
    Serial.print(F("Baud rate: "));
    Serial.println(finger.baud_rate);
  }


  // Wire1.beginTransmission();
  i2c_detect(Wire1);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setRotation(2);            //display rotation
  disp_st = i2c_check(Wire1, 0x3C);  // check disp avarable
  Serial.print("disp_st:");
  Serial.println(disp_st);

  display1.begin(SSD1306_SWITCHCAPVCC, 0x3D);
  display1.setRotation(2);            //display rotation
  disp1_st = i2c_check(Wire1, 0x3D);  //check disp1 avarable
  Serial.print("disp1_st:");
  Serial.println(disp1_st);


  //display故障でループ停止
  if (disp1_st != 0 or disp_st != 0) {
    // Serial.println("exit loop due to monitor fail");
    if (disp_st > 0) {

      // // OLED表示（サブ画面）
      display1.clearDisplay();               //表示クリア
      display1.setTextSize(2);               //文字サイズ
      display1.setTextColor(SSD1306_WHITE);  //文字色
      display1.setCursor(0, 0);              //表示開始位置左上角（X,Y）
      display1.println("Disp fail");         //表示内容
      display1.display();
      Serial.println("ERR:Disp fail");  //表示内容
    }
    if (disp1_st > 0) {

      // // OLED表示（サブ画面）
      display.clearDisplay();               //表示クリア
      display.setTextSize(2);               //文字サイズ
      display.setTextColor(SSD1306_WHITE);  //文字色
      display.setCursor(0, 0);              //表示開始位置左上角（X,Y）
      display.println("Disp fail");         //表示内容
      display.display();
      Serial.println("ERR:Disp1 fail");  //表示内容
    }
    while (true) {
    }
    // exit(0);
  }
  byte km_st;
  km_st = lox.begin(41, false, &Wire1);
  if (!km_st) {
    delay(10);
    Serial.println(F("ERR:VL53L0X Fail"));

    // Serial.println("disp ff3");
    display.clearDisplay();
    display.setCursor(0, 0);  //表示開始位置左上角（X,Y）
    display.drawBitmap(0, 0, km_err, 128, 64, 1);
    display.display();
    // while (true) {
    //   // Serial.println("disp ff");
    //   delay(10);
    // }
    //   ;
  } else {
    display.clearDisplay();
    // display.setCursor(0, 0);  //表示開始位置左上角（X,Y）
    // display.drawBitmap(0, 0, km_err, 128, 64, 1);
    display.display();

    Serial.println("VL53L0X OK");
  }
  byte tmp_st;
  Serial.println("VL53L0X OK");
  tmp_st = mlx.begin(90, &Wire1);
  Serial.println("VL53L0X OK1");
  if (!tmp_st) {
    Serial.println("ERR:MLX sensor. Check wiring.");
    Serial.println("disp ff3");
    display1.clearDisplay();
    display1.setCursor(0, 0);  //表示開始位置左上角（X,Y）
    display1.drawBitmap(0, 0, tmp_err, 128, 64, 1);
    display1.display();
  } else {
    Serial.println("MLX Sensor OK");
    display1.clearDisplay();
    // display1.setCursor(0, 0);  //表示開始位置左上角（X,Y）
    // display1.drawBitmap(0, 0, km_err, 128, 64, 1);
    display1.display();
  }

  while ((!tmp_st) || (!km_st)) {
    delay(10);
  }

  display.clearDisplay();               //表示クリア
  display.setTextSize(2);               //文字サイズ
  display.setTextColor(SSD1306_WHITE);  //文字色
  display.setCursor(0, 0);              //表示開始位置左上角（X,Y）
  display.println("test");              //表示内容
  display.display();                    //表示実行

  // // OLED表示（サブ画面）
  display1.clearDisplay();               //表示クリア
  display1.setTextSize(2);               //文字サイズ
  display1.setTextColor(SSD1306_WHITE);  //文字色
  display1.setCursor(0, 0);              //表示開始位置左上角（X,Y）
  display1.println("test");              //表示内容
  display1.display();                    //表示実行


  lox.startRangeContinuous();
}


const uint8_t maxnum = 10;

String myString;
char myString2;
int km;
float tmp_[maxnum-1];
float amb_[maxnum-1];
uint8_t dist_[maxnum-1];
uint8_t count_;

void loop() {

  double obj, amb;


  if (Serial.available()) {
    myString = Serial.readString();
    Serial.println(myString);
  }
  // Serial.println("test1");
  if (Serial1.available()) {
    myString2 = Serial1.read();
    //   // if (myString2 != "") {

    Serial.print(myString2);
    // delay(10);
    //   // }
  }
  if (Serial2.available()) {
    myString2 = Serial2.read();
    //   // if (myString2 != "") {

    Serial.print(myString2);
    // delay(10);
    //   // }
  }



  if (lox.isRangeComplete()) {
    // km_st = lox.begin(41, false, &Wire1);
    km = lox.readRange();
    if (km == 65535) {

      // Serial.println("disp ff3");
      display1.clearDisplay();
      display1.setCursor(0, 0);  //表示開始位置左上角（X,Y）
      display1.drawBitmap(0, 0, km_err, 128, 64, 1);
      display1.display();
      while (km == 65535) {
        delay(10);
        // if (lox.isRangeComplete()) {
        //   km = lox.readRange();
        // }
      }
    } else {
    }

    if (km < 100 && 50 < km) {
      count_++;
      delay(10);
      if (count_ == maxnum) {
        count_ = 0;
        Serial.print("tmp:[");
        for (uint8_t ii = 0; ii < maxnum-1; ii++) {
          Serial.print(tmp_[ii]);
          if (ii != maxnum - 2) {
            Serial.print(",");
          }
        }
        Serial.println("]");

        Serial.print("dist:[");
        for (uint8_t ii = 0; ii < maxnum-1; ii++) {
          Serial.print(dist_[ii]);
          if (ii != maxnum - 2) {
            Serial.print(",");
          }
        }
        Serial.println("]");

        Serial.print("amb:[");
        for (uint8_t ii = 0; ii < maxnum-1; ii++) {
          Serial.print(amb_[ii]);
          if (ii != maxnum - 2) {
            Serial.print(",");
          }
        }
        Serial.println("]");
        Serial.flush();     
        // Serial.println(dist_);
        delay(5000);
      }

    } else {
      count_ = 0;
    }

    if (count_ > 0) {

      display1.clearDisplay();  //表示クリア
      display1.setTextSize(2);  //文字サイズ
      // display1.setTextColor(SSD1306_WHITE);  //文字色
      display1.setCursor(0, 0);  //表示開始位置左上角（X,Y）
      display1.print("dis:");    //表示内容
      display1.println(km);      //表示内容
      display1.display();
    } else {
      display1.clearDisplay();  //表示クリア
      display1.display();

    }




    amb = mlx.readAmbientTempC();
    obj = mlx.readObjectTempC();
    if (isinf(obj)) {  //温度センサーエラーでinfになるので、エラー処理
      display.clearDisplay();
      display.setCursor(0, 0);  //表示開始位置左上角（X,Y）
      display.drawBitmap(0, 0, tmp_err, 128, 64, 1);
      display.display();

      while (true) {
        delay(10);
      }
    } else {
      if (count_ > 0) {
        tmp_[count_-1] = obj;
        amb_[count_-1] = amb;
        dist_[count_-1] = km;
        display.clearDisplay();  //表示クリア
        display.setTextSize(2);  //文字サイズ
        // display.setTextColor(SSD1306_WHITE);  //文字色
        display.setCursor(0, 0);   //表示開始位置左上角（X,Y）
        display.print("amb ");     //表示内容
        display.println(amb);      //表示内容
        display.setCursor(0, 15);  //表示開始位置左上角（X,Y）
        display.print("obj ");     //表示内容
        display.println(obj);      //表示内容
        display.display();
      } else {

        display.clearDisplay();  //表示クリア
        // display.setTextSize(2);  //文字サイズ
        // display.setTextColor(SSD1306_WHITE);  //文字色
        // display.setCursor(0, 0);   //表示開始位置左上角（X,Y）
        // display.print("amb ");     //表示内容
        // display.println(amb);      //表示内容
        // display.setCursor(0, 15);  //表示開始位置左上角（X,Y）
        // display.print("obj ");     //表示内容
        // display.println(obj);      //表示/内容
        display.display();
      }
    }
    // Serial.print("Distance in mm: ");
    // Serial.println(lox.readRange());
  }

  // if (myString.startsWith("enroll:")) {
  //   myString.replace("enroll:", "");
  //   Serial.println(myString);
  //   // finger.getFingerprintEnroll(myString.toInt());
  //   // enID=cngString.toInt();
  // }
  // getStructuredPacket
  // uint8_t p = -1;
  // if (myString.startsWith("getfingerdata:")) {
  //   myString.replace("getfingerdata:", "");
  //   Serial.println(myString);
  //   // Adafruit_Fingerprint_Packet packet;

  //   p = finger.getStructuredPacket(packet);
  //   Serial.println(p);
  //   Serial.write(packet->data, packet->length);
  //   // getFingerprintEnroll(myString.toInt());
  //   // enID=cngString.toInt();
  // }

  // Serial.println(myString);
  // Serial.println("test");
}